"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncodedBucket = void 0;
const queued_iterator_1 = require("./queued_iterator");
const types_1 = require("./types");
class EncodedBucket {
    constructor(bucket, codec) {
        this.bucket = bucket;
        this.codec = codec;
    }
    toEncodedEntry(e) {
        return {
            bucket: this.bucket.bucket,
            key: e.key,
            value: e.value.length > 0 ? this.codec.decode(e.value) : undefined,
            delta: 0,
            created: e.created,
            seq: e.seq,
            origin_cluster: e.origin_cluster,
            operation: e.operation,
        };
    }
    put(k, data, opts = {}) {
        const buf = data ? this.codec.encode(data) : types_1.Empty;
        return this.bucket.put(k, buf, opts);
    }
    get(k) {
        return __awaiter(this, void 0, void 0, function* () {
            const v = yield this.bucket.get(k);
            if (v) {
                return this.toEncodedEntry(v);
            }
            return null;
        });
    }
    delete(k) {
        return this.bucket.delete(k);
    }
    toEncodedIter(src) {
        return __awaiter(this, void 0, void 0, function* () {
            const iter = new queued_iterator_1.QueuedIteratorImpl();
            yield (() => __awaiter(this, void 0, void 0, function* () {
                var e_1, _a;
                try {
                    for (var src_1 = __asyncValues(src), src_1_1; src_1_1 = yield src_1.next(), !src_1_1.done;) {
                        const e = src_1_1.value;
                        iter.push(this.toEncodedEntry(e));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (src_1_1 && !src_1_1.done && (_a = src_1.return)) yield _a.call(src_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }))();
            iter.stop();
            return iter;
        });
    }
    history(k) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.toEncodedIter(yield this.bucket.history(k));
        });
    }
    watch(opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.toEncodedIter(yield this.bucket.watch(opts));
        });
    }
    keys() {
        return this.bucket.keys();
    }
    purge(opts) {
        return this.bucket.purge(opts);
    }
    destroy() {
        return this.bucket.destroy();
    }
    status() {
        return this.bucket.status();
    }
    close() {
        return this.bucket.close();
    }
}
exports.EncodedBucket = EncodedBucket;
//# sourceMappingURL=ekv.js.map